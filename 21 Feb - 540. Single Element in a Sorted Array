class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        // left odd 
        // right odd 

        int low = 0, high = nums.size()-1;

        while( low <= high ){
            int mid = ( low + high ) >> 1;
            
            if( mid-1 >=low and mid+1 <= high ){
                // it means we can go left and right
                if( nums[mid-1] != nums[mid] and nums[mid+1] != nums[mid] ) return nums[mid];

                if( nums[mid-1] == nums[mid] ){
                    int left = ( mid - 2 ) - low + 1;
                    int right = high - ( mid + 1 ) + 1;

                    if( left%2 ) high = mid - 2;
                    else low = mid + 1;
                }
                else if( nums[mid+1] == nums[mid] ){
                    int left = mid - 1 - low + 1;
                    int right = high - ( mid + 2 ) + 1;

                    if( left%2 ) high = mid - 1;
                    else low = mid + 2;
                }
            }
            else if( mid-1 >= low ){

                if( nums[mid-1] != nums[mid] ) return nums[mid];

                if( nums[mid-1] == nums[mid] ){
                    int left = ( mid - 2 ) - low + 1;
                    int right = high - ( mid + 1 ) + 1;

                    if( left%2 ) high = mid - 2;
                    else low = mid + 1;
                }
            }
            else if( mid+1 <= high ){
                if( nums[mid] != nums[mid+1] ) return nums[mid];
                else{
                    int left = mid - 1 - low + 1;
                    int right = high - ( mid + 2 ) + 1;

                    if( left%2 ) high = mid - 1;
                    else low = mid + 2;
                }
            }
            else return nums[mid];
        }

        return -1;
    }
};
